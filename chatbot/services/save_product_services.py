import json
import re
import logging
from .entity_recognition_service import identify_entities
from ..models import Product  # Importamos el modelo de producto

# Configurar logging
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)

def detect_entities(text):
    """
    Llama al modelo de lenguaje para detectar entidades en el texto.
    """
    logger.info("üîç Detectando entidades en el texto...")
    try:
        response = identify_entities(text)
        logger.info(f"‚úÖ Entidades detectadas: {response}")
        return response
    except Exception as e:
        logger.error(f"‚õî Error en detect_entities: {e}")
        return "{}"  # Retorna JSON vac√≠o en caso de error

def extract_json(response_text):
    """
    Extrae el contenido JSON de una respuesta del modelo de lenguaje,
    eliminando cualquier texto adicional fuera de las llaves {}.
    """
    logger.info("üîç Intentando extraer JSON de la respuesta del modelo...")
    try:
        # Buscar el primer bloque JSON v√°lido dentro del texto usando expresiones regulares
        match = re.search(r"\{.*\}", response_text, re.DOTALL)

        if match:
            cleaned_json = match.group(0)  # Tomar solo el JSON encontrado
            logger.info(f"‚úÖ JSON extra√≠do correctamente: {cleaned_json}")
            return json.loads(cleaned_json)  # Convertir a diccionario de Python
        else:
            raise ValueError("No se encontr√≥ un JSON v√°lido en la respuesta.")

    except (json.JSONDecodeError, ValueError) as e:
        logger.error(f"‚õî Error al extraer JSON: {e}")
        return {}  # Retornar un diccionario vac√≠o en caso de error

from decimal import Decimal
import re


def sanitize_price(price_str):
    """
    Convierte una cadena de precio con formato europeo (ej. "2.528,75 ‚Ç¨") en un n√∫mero decimal v√°lido.
    """
    if not price_str:
        return None

    try:
        # üîπ Eliminar caracteres no num√©ricos excepto comas y puntos
        cleaned_price = re.sub(r"[^\d,\.]", "", price_str)

        # üîπ Verificar si el n√∫mero usa coma decimal (formato europeo)
        if "," in cleaned_price and "." in cleaned_price:
            # Si hay tanto coma como punto, eliminar el punto (para formatos "2.528,75")
            cleaned_price = cleaned_price.replace(".", "")
        
        # üîπ Convertir coma decimal a punto
        cleaned_price = cleaned_price.replace(",", ".")

        # üîπ Convertir a decimal y validar que sea un n√∫mero v√°lido
        decimal_price = Decimal(cleaned_price)
        return decimal_price

    except Exception as e:
        print(f"‚õî Error al convertir precio: {e}")
        return None


def convert_to_object(entities_json):
    """
    Convierte el JSON de entidades en un objeto Product,
    asegurando que los valores sean correctos antes de guardarlos.
    """
    logger.info("üîç Convirtiendo JSON a objeto Product...")
    try:
        entities = extract_json(entities_json)

        if not isinstance(entities, dict):
            raise ValueError("El JSON no es un diccionario v√°lido.")

        logger.info(f"‚úÖ JSON convertido correctamente: {entities}")

    except Exception as e:
        logger.error(f"‚õî Error al decodificar JSON en convert_to_object: {e}")
        entities = {}

    # üîπ Verificar si los campos son diccionarios o strings antes de acceder a `.get()`
    grafica_modelo = entities["gr√°fica"]["modelo"] if isinstance(entities.get("gr√°fica"), dict) else entities.get("gr√°fica", "Desconocido")
    procesador_modelo = entities["procesador"]["modelo"] if isinstance(entities.get("procesador"), dict) else entities.get("procesador", "Desconocido")

    pantalla_data = entities.get("pantalla", {})
    if isinstance(pantalla_data, dict):
        pantalla_info = f"{pantalla_data.get('tama√±o', 'N/A')} {pantalla_data.get('resoluci√≥n', 'Desconocido')}"
    else:
        pantalla_info = pantalla_data  # Si ya es un string, lo dejamos como est√°

    audio_info = entities["audio"]["tipo"] if isinstance(entities.get("audio"), dict) else entities.get("audio", "No disponible")

    # üîπ Convertir precio antes de asignarlo
    precio_final = sanitize_price(entities.get("precio"))

    # Crear el objeto Product con valores limpios
    product = Product(
        precio=precio_final,
        modelo=entities.get("modelo", "Desconocido"),
        almacenamiento=entities.get("almacenamiento"),
        memoria=entities.get("memoria"),
        gr√°fica=grafica_modelo,
        procesador=procesador_modelo,
        pantalla=pantalla_info,
        peso=entities.get("peso"),
        color=entities.get("color", "Sin especificar"),
        audio=audio_info,
    )

    return product




def save_product_service(text):
    """
    Extrae entidades del texto, convierte a objeto Product y guarda en la BD.
    """
    logger.info("üìù Iniciando el proceso de extracci√≥n y guardado de producto...")
    entities_json = detect_entities(text)

    if not entities_json or entities_json == "{}":
        logger.error("‚õî No se encontraron entidades en el texto.")
        return None

    product = convert_to_object(entities_json)

    # Verificamos si al menos un campo relevante tiene valor antes de guardar
    if any([
        product.precio, product.modelo, product.almacenamiento, product.memoria,
        product.gr√°fica, product.procesador, product.pantalla, product.peso, product.color, product.audio
    ]):
        try:
            product.save()
            logger.info(f"‚úÖ Producto guardado con √©xito: {product}")
            return product
        except Exception as e:
            logger.error(f"‚õî Error al guardar el producto en la BD: {e}")
            return None
    else:
        logger.warning("‚ö†Ô∏è No hay suficientes datos para guardar el producto.")
        return None
